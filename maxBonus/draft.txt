Draft Problem
    -Max
Scenario:
You are in charge of picking the members of two sports teams, Team A, and Team B, from a pool of candidates that are
ranked among themselves. Every candidate must be on a team, and the size of the teams should differ by no more than 1.
You must ensure that the teams are as fair as possible, so you want the sums of the ranks of the two teams to be as
close as possible.
Part 1:
Write a function "numWays()" that takes in a list of the ranks of all the candidates ("ranks") and return the number of
ways to divide the candidates into two teams that satisfy the constraints above.
Examples:
    input:
        ranks = [3, 2, 4, 1]
    possible teams:
        Team A: [1, 4];  Team B: [2, 3];
        Team A: [2, 3];  Team B: [1, 4];
    solution:
        2
    input:
        ranks = [1, 2, 3, 5, 4]
    possible teams:
        Team A: [2, 5];     Team B: [1, 3, 4];
        Team A: [1, 2, 5];  Team B: [3, 4];
        Team A: [3, 5];     Team B: [1, 2, 4];
        Team A: [1, 3, 4];  Team B: [2, 5];
        Team A: [3, 4];     Team B: [1, 2, 5];
        Team A: [1, 2, 4];  Team B: [3, 5];
    solution:
        6
Part 2:
Write a function "pick()" that takes in a list of the ranks of all the candidates ("ranks") and an index
into that list ("player"). The function should return 'false' if the player should be on Team A and 'true' if the player
should be on Team B.
Your function should be self-consistent, meaning that repeatedly calling your function on a given ranks array for every
possible index into that array should partition the players into two teams of maximally similar sums of rank.
Example:
    input:
        ranks = [3, 2, 4, 1]
        player = 1
    solution:
        true
    input:
        ranks = [3, 2, 4, 1]
        player = 2
    solution:
        false
    input:
        ranks = [3, 2, 4, 1]
        player = 0
    solution:
        true
    input:
        ranks = [3, 2, 4, 1]
        player = 3
    solution:
        false