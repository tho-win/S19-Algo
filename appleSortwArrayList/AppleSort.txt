UVA students love to go apple picking (Carter mountain is a great place to do this). Because they are UVA students
they have invented a device that allows them to test the deliciousness of apples on scale of 1 to 10. Where 10 is the
most delicious. However, the device is too heavy so they have to wait until they get back to test the apples.
N friends go apple picking, each of them takes turns sorting the apples in their baskets by deliciousness.
Basket 0:  [1, 1, 2]  A lot of bad apples
....
....
....
....
Basket N-1 : [10, 10, 10, 1] A lot of good apples
Since they are friends they don't think that it is fair that some friends get baskets with mostly good apples
while other friends get baskets with bad apples. So they decide to do something about it.
They assume that if you have a good apple you should get a bad apple to balance things out.
They want an algorithm that allows them to line all the apples up from yucky apples 0 to best apples 10.
[0 , 0, ..........4..4.    ......... 10, 10 ]
Once they have all the apples lined up each person takes a turn picking the best and worst apple.
Example 0, 10
Implement the algorithm that creates the final array of sorted apples assuming each basket of apples is already sorted.
You alogorithm should run O(KN) where k is the number of baskets. This will run alot fast than a regular sort as long
as k < log(N) where N is the number of apples.
